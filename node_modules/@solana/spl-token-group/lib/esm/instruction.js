import { getBytesEncoder, getStructEncoder, getTupleEncoder, getU32Encoder, mapEncoder } from '@solana/codecs';
import { splDiscriminate } from '@solana/spl-type-length-value';
import { SystemProgram, TransactionInstruction } from '@solana/web3.js';
function getInstructionEncoder(discriminator, dataEncoder) {
    return mapEncoder(getTupleEncoder([getBytesEncoder(), dataEncoder]), (data) => [
        discriminator,
        data,
    ]);
}
function getPublicKeyEncoder() {
    return mapEncoder(getBytesEncoder({ size: 32 }), (publicKey) => publicKey.toBytes());
}
export function createInitializeGroupInstruction(args) {
    const { programId, group, mint, mintAuthority, updateAuthority, maxSize } = args;
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: group },
            { isSigner: false, isWritable: false, pubkey: mint },
            { isSigner: true, isWritable: false, pubkey: mintAuthority },
        ],
        data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_group_interface:initialize_token_group'), getStructEncoder([
            ['updateAuthority', getPublicKeyEncoder()],
            ['maxSize', getU32Encoder()],
        ])).encode({ updateAuthority: updateAuthority ?? SystemProgram.programId, maxSize })),
    });
}
export function createUpdateGroupMaxSizeInstruction(args) {
    const { programId, group, updateAuthority, maxSize } = args;
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: group },
            { isSigner: true, isWritable: false, pubkey: updateAuthority },
        ],
        data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_group_interface:update_group_max_size'), getStructEncoder([['maxSize', getU32Encoder()]])).encode({ maxSize })),
    });
}
export function createUpdateGroupAuthorityInstruction(args) {
    const { programId, group, currentAuthority, newAuthority } = args;
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: group },
            { isSigner: true, isWritable: false, pubkey: currentAuthority },
        ],
        data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_group_interface:update_authority'), getStructEncoder([['newAuthority', getPublicKeyEncoder()]])).encode({ newAuthority: newAuthority ?? SystemProgram.programId })),
    });
}
export function createInitializeMemberInstruction(args) {
    const { programId, member, memberMint, memberMintAuthority, group, groupUpdateAuthority } = args;
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: member },
            { isSigner: false, isWritable: false, pubkey: memberMint },
            { isSigner: true, isWritable: false, pubkey: memberMintAuthority },
            { isSigner: false, isWritable: true, pubkey: group },
            { isSigner: true, isWritable: false, pubkey: groupUpdateAuthority },
        ],
        data: Buffer.from(getInstructionEncoder(splDiscriminate('spl_token_group_interface:initialize_member'), getStructEncoder([])).encode({})),
    });
}
//# sourceMappingURL=instruction.js.map