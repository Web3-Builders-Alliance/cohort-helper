import { FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder, VariableSizeCodec, VariableSizeDecoder, VariableSizeEncoder } from '@solana/codecs-core';
import { FixedSizeNumberCodec, FixedSizeNumberDecoder, FixedSizeNumberEncoder, NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';
/**
 * Defines the "lookup object" of a scalar enum.
 *
 * @example
 * ```ts
 * enum Direction { Left, Right };
 * ```
 */
export type ScalarEnum = {
    [key: string]: number | string;
};
/**
 * Returns the allowed input for a scalar enum.
 *
 * @example
 * ```ts
 * enum Direction { Left, Right };
 * type DirectionInput = ScalarEnumFrom<Direction>; // "Left" | "Right" | 0 | 1
 * ```
 */
export type ScalarEnumFrom<TEnum extends ScalarEnum> = TEnum[keyof TEnum] | keyof TEnum;
/**
 * Returns all the available variants of a scalar enum.
 *
 * @example
 * ```ts
 * enum Direction { Left, Right };
 * type DirectionOutput = ScalarEnumFrom<Direction>; // 0 | 1
 * ```
 */
export type ScalarEnumTo<TEnum extends ScalarEnum> = TEnum[keyof TEnum];
/** Defines the config for scalar enum codecs. */
export type ScalarEnumCodecConfig<TDiscriminator extends NumberCodec | NumberDecoder | NumberEncoder> = {
    /**
     * The codec to use for the enum discriminator.
     * @defaultValue u8 discriminator.
     */
    size?: TDiscriminator;
};
/**
 * Creates a scalar enum encoder.
 *
 * @param constructor - The constructor of the scalar enum.
 * @param config - A set of config for the encoder.
 */
export declare function getScalarEnumEncoder<TEnum extends ScalarEnum>(constructor: TEnum): FixedSizeEncoder<ScalarEnumFrom<TEnum>, 1>;
export declare function getScalarEnumEncoder<TEnum extends ScalarEnum, TSize extends number>(constructor: TEnum, config: ScalarEnumCodecConfig<NumberEncoder> & {
    size: FixedSizeNumberEncoder<TSize>;
}): FixedSizeEncoder<ScalarEnumFrom<TEnum>, TSize>;
export declare function getScalarEnumEncoder<TEnum extends ScalarEnum>(constructor: TEnum, config?: ScalarEnumCodecConfig<NumberEncoder>): VariableSizeEncoder<ScalarEnumFrom<TEnum>>;
/**
 * Creates a scalar enum decoder.
 *
 * @param constructor - The constructor of the scalar enum.
 * @param config - A set of config for the decoder.
 */
export declare function getScalarEnumDecoder<TEnum extends ScalarEnum>(constructor: TEnum): FixedSizeDecoder<ScalarEnumTo<TEnum>, 1>;
export declare function getScalarEnumDecoder<TEnum extends ScalarEnum, TSize extends number>(constructor: TEnum, config: ScalarEnumCodecConfig<NumberDecoder> & {
    size: FixedSizeNumberDecoder<TSize>;
}): FixedSizeDecoder<ScalarEnumTo<TEnum>, TSize>;
export declare function getScalarEnumDecoder<TEnum extends ScalarEnum>(constructor: TEnum, config?: ScalarEnumCodecConfig<NumberDecoder>): VariableSizeDecoder<ScalarEnumTo<TEnum>>;
/**
 * Creates a scalar enum codec.
 *
 * @param constructor - The constructor of the scalar enum.
 * @param config - A set of config for the codec.
 */
export declare function getScalarEnumCodec<TEnum extends ScalarEnum>(constructor: TEnum): FixedSizeCodec<ScalarEnumFrom<TEnum>, ScalarEnumTo<TEnum>, 1>;
export declare function getScalarEnumCodec<TEnum extends ScalarEnum, TSize extends number>(constructor: TEnum, config: ScalarEnumCodecConfig<NumberCodec> & {
    size: FixedSizeNumberCodec<TSize>;
}): FixedSizeCodec<ScalarEnumFrom<TEnum>, ScalarEnumTo<TEnum>, TSize>;
export declare function getScalarEnumCodec<TEnum extends ScalarEnum>(constructor: TEnum, config?: ScalarEnumCodecConfig<NumberCodec>): VariableSizeCodec<ScalarEnumFrom<TEnum>, ScalarEnumTo<TEnum>>;
//# sourceMappingURL=scalar-enum.d.ts.map