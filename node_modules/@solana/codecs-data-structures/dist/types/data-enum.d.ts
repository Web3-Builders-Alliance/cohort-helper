import { Codec, Decoder, Encoder } from '@solana/codecs-core';
import { NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';
/**
 * Defines a data enum using discriminated union types.
 *
 * @example
 * ```ts
 * type WebPageEvent =
 *   | { __kind: 'pageview', url: string }
 *   | { __kind: 'click', x: number, y: number };
 * ```
 */
export type DataEnum = {
    __kind: string;
};
/**
 * Extracts a variant from a data enum.
 *
 * @example
 * ```ts
 * type WebPageEvent =
 *   | { __kind: 'pageview', url: string }
 *   | { __kind: 'click', x: number, y: number };
 * type ClickEvent = GetDataEnumKind<WebPageEvent, 'click'>;
 * // -> { __kind: 'click', x: number, y: number }
 * ```
 */
export type GetDataEnumKind<T extends DataEnum, K extends T['__kind']> = Extract<T, {
    __kind: K;
}>;
/**
 * Extracts a variant from a data enum without its discriminator.
 *
 * @example
 * ```ts
 * type WebPageEvent =
 *   | { __kind: 'pageview', url: string }
 *   | { __kind: 'click', x: number, y: number };
 * type ClickEvent = GetDataEnumKindContent<WebPageEvent, 'click'>;
 * // -> { x: number, y: number }
 * ```
 */
export type GetDataEnumKindContent<T extends DataEnum, K extends T['__kind']> = Omit<Extract<T, {
    __kind: K;
}>, '__kind'>;
/** Defines the config for data enum codecs. */
export type DataEnumCodecConfig<TDiscriminator = NumberCodec | NumberDecoder | NumberEncoder> = {
    /**
     * The codec to use for the enum discriminator prefixing the variant.
     * @defaultValue u8 prefix.
     */
    size?: TDiscriminator;
};
type Variants<T> = readonly (readonly [string, T])[];
type ArrayIndices<T extends readonly unknown[]> = Exclude<Partial<T>['length'], T['length']> & number;
type GetEncoderTypeFromVariants<TVariants extends Variants<Encoder<any>>> = {
    [I in ArrayIndices<TVariants>]: (TVariants[I][1] extends Encoder<infer TFrom> ? TFrom extends object ? TFrom : object : never) & {
        __kind: TVariants[I][0];
    };
}[ArrayIndices<TVariants>];
type GetDecoderTypeFromVariants<TVariants extends Variants<Decoder<any>>> = {
    [I in ArrayIndices<TVariants>]: (TVariants[I][1] extends Decoder<infer TTo> ? TTo extends object ? TTo : object : never) & {
        __kind: TVariants[I][0];
    };
}[ArrayIndices<TVariants>];
/**
 * Creates a data enum encoder.
 *
 * @param variants - The variant encoders of the data enum.
 * @param config - A set of config for the encoder.
 */
export declare function getDataEnumEncoder<const TVariants extends Variants<Encoder<any>>>(variants: TVariants, config?: DataEnumCodecConfig<NumberEncoder>): Encoder<GetEncoderTypeFromVariants<TVariants>>;
/**
 * Creates a data enum decoder.
 *
 * @param variants - The variant decoders of the data enum.
 * @param config - A set of config for the decoder.
 */
export declare function getDataEnumDecoder<const TVariants extends Variants<Decoder<any>>>(variants: TVariants, config?: DataEnumCodecConfig<NumberDecoder>): Decoder<GetDecoderTypeFromVariants<TVariants>>;
/**
 * Creates a data enum codec.
 *
 * @param variants - The variant codecs of the data enum.
 * @param config - A set of config for the codec.
 */
export declare function getDataEnumCodec<const TVariants extends Variants<Codec<any, any>>>(variants: TVariants, config?: DataEnumCodecConfig<NumberCodec>): Codec<GetEncoderTypeFromVariants<TVariants>, GetDecoderTypeFromVariants<TVariants> & GetEncoderTypeFromVariants<TVariants>>;
export {};
//# sourceMappingURL=data-enum.d.ts.map